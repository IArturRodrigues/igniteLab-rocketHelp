expo init nomeDoProjeto
escolher opção minimal
funções iniciadas com handle se referem a funções que são disparadas por ações do usuário

pode ocorrer erros de performance no rn quando um estado é atualizado na hora que o componente desmonta

para configurar o typescript {
   troque o App.js para App.tsx
   crie um arquivo de configurações do typescript (tsconfig.json)
   rode o comando expo start
   quando ele perguntar se quer instalar o typescript basta apertar y (yes) e toda a configuração estará feita
}

eslint {
   yarn create @eslint/config
   com prettier: yarn add -D eslint-config-prettier

   colocar "plugin:prettier/recommended" como ultimo extends
   o que esse negocio faz {
      "extends": ["prettier"],
      "plugins": ["prettier"],
      "rules": {
         "prettier/prettier": "error",
         "arrow-body-style": "off",
         "prefer-arrow-callback": "off"
      }
   }

   crie o arquivo .prettierrc
   configs usadas {
      "tabWidth": 3,
      "trailingComma": "es5",
      "arrowParens": "always",
      "semi": true,
      "singleQuote": true,
      "useTabs": true,
      "jsxSingleQuote": false,
      "endOfLine": "auto",
      "printWidth": 100
   }

   criar uma pasta .vscode com o arquivo settings.json {
      "editor.formatOnSave": true,
      "editor.defaultFormatter": "esbenp.prettier-vscode"
   }
}

usando native base {
   yarn add native-base
   expo install react-native-svg
   expo install react-native-safe-area-context

   No App.tsx {
      import { NativeBaseProvider } from 'native-base';

      export default function App () {
         <NativeBaseProvider>
            // colocar os componentes que terão acesso ao native base aqui dentro
         </NativeBaseProvider>
      }
   }
}

usando fonts no react native com expo {
   basta colocar o comando: expo install expo-font @expo-google-fonts/(nomeDaFonte)

   no App.tsx {
      import { useFonts, Font400, Font500 } from '@expo-google-fonts/(nomeDaFonte)';

      export function App () {
         const [fontsLoaded] = useFonts({ Font400, Font500 });

         if (!fontsLoaded) {
            return <Loading />;
         }

         return (
            <Components />
         );

         /* OU */

         return (
            { fontsLoaded ? <Component(s) /> : <Loading /> }
         );
      }
   }
}

utilizando svg como component {
   yarn add -D react-native-svg-transformer

   caso nao esteja utilizando o NativeBase instalar também: expo install react-native-svg

   criar um arquivo para definir módulos svg {
      // svg.d.ts
      declare module '*.svg' {
         import React from 'react';
         import { SvgProps } from 'react-native-svg';
         const content: React.FC<SvgProps>;
         export default content;
      }
   }
}

usando o firebase {
   yarn add @react-native-firebase/app

   adicione ao app.json {
      "expo": {
         ...,
         "plugins": [
            "@react-native-firebase/app"
         ],
         "android": {
            "package": "nome.do.pacote", // estilo pacotes do java
            "googleServicesFile": "./google-services.json"
         },
         "ios": {
            "bundleIdentifier": "nome.do.pacote", // é bom que seja o mesmo pra android e iOS
            "googleServicesFile": "./GoogleService-Info.plist"
         }
      }
   }

   no firebase {
      na aba visão geral do projeto {
         adicione o firebase ao android e ao iOS na parte onde fala "Comece adicionando o firebase ao seu app"
         coloque o nome do pacote // ele pode ser gerado/alterado dando o comando do expo que foi deixado no final porem dessa forma vai dar erro
         apelido (opcional) // pode usar o nome da própria plataforma para poder identificar mais facilmente as configurações
         código na loja de aplicativos [iOS] / Certificado de assinatura de depuração [Android] (opcional)
         faça o download do GoogleService-Info.plist [iOS] / google-services.json [Android] e coloque na raiz do projeto
         // agora virão etapas de configuração manual, se não estiver utilizando o expo basta seguir cada uma
      }

      configure a parte de autenticação e do firestore
   }

   apos isso coloque o comando no terminal: expo prebuild

   para configurar o firebase com iOS tem informações na lib que conecta react native com firebase

   obs {
      baixe apenas os módulos que serão utilizados

      nesse app foram usados:
      yarn add @react-native-firebase/firestore
      yarn add @react-native-firebase/auth

      como o expo go ainda não tem compatibilidade total com o firebase teremos que rodar ele de outra forma
      use o comando: expo run:android
   }

   links {
      criar um novo projeto em: https://firebase.google.com
      lib/doc para firebase com react native: https://rnfirebase.io
      doc expo: https://docs.expo.dev/guides/config-plugins/
      doc firebase com expo: https://docs.expo.dev/guides/setup-native-firebase/
   }
}
